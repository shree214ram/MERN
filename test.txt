import React from 'react';
// import ReactScrollbar from 'react-scrollbar-js';
import ReactTable from 'react-table';
import moment from 'moment';
import { findIndex, map, filter } from 'lodash';
import { connect } from 'react-redux';
import { Link } from 'react-router';
import { Checkbox } from 'react-bootstrap';
import 'react-day-picker/lib/style.css';
import {
  getOversightReports,
  setOversightReportAction,
  setCurrentOversightReport,
  updateReportSelect,
  deleteOversightReports,
  resetOversightMessage,
  deleteSingleReport,
  resetOSReqLoading
} from '../../../actions/OversightReportActions';
import {
  getOversightFormGlobals,
  getRecomendationFormGlobals
} from '../../../actions/GlobalActions';
import NamesComponent from '../../Shared/NamesComponent/NamesComponent';
import ConfirmDialog from '../../Shared/ConfirmDialog/ConfirmDialog';
import LoadingComponent from '../../Shared/LoadingComponent/LoadingComponent';
import Snackbar from '../../Snackbar';
import './OverSightReportHome.scss';

class OverSightReportHome extends React.Component {
  static get contextTypes() {
    return {
      router: React.PropTypes.object.isRequired
    };
  }

  constructor(props) {
    super(props);
    this.state = {
      showConfirmDialog: false,
      showdeleteDialog: false,
      showsnackbar: false
    };
    this.submitConfirm = this.submitConfirm.bind(this);
    this.onHideConfirmModal = this.onHideConfirmModal.bind(this);
    this.toggleState = this.toggleState.bind(this);
    this.hidedeleteModal = this.hidedeleteModal.bind(this);
    this.deleteReports = this.deleteReports.bind(this);
  }

  componentWillMount() {
    this.props.dispatch(getOversightFormGlobals());
    this.props.dispatch(getRecomendationFormGlobals());
    this.props.dispatch(getOversightReports());
    this.props.dispatch(resetOSReqLoading());
  }

  componentWillReceiveProps(nextProps) {
    if (nextProps.oversightReport.message !== this.props.oversightReport.message) {
      if ((nextProps.oversightReport.message) && (nextProps.oversightReport.message !== '')) {
        this.props.dispatch(resetOversightMessage());
        this.setState({ showsnackbar: true, message: nextProps.oversightReport.message });
      }
    }
  }

  onHideConfirmModal = () => {
    this.setState({ showConfirmDialog: false });
  }

  deleteOversightReport = () => {
    if (findIndex(this.props.oversightReport.oversightReports, ['checked', true]) > -1) {
      this.setState({ showConfirmDialog: true });
    }
  }

  submitConfirm = () => {
    const selectedReports = map(filter(this.props.oversightReport.oversightReports, ['checked', true]), 'oversightReportId');
    this.props.dispatch(deleteOversightReports(selectedReports));
    this.setState({ showConfirmDialog: false });
  }

  hidedeleteModal = () => {
    this.setState({ showdeleteDialog: false });
  }

  deleteSingleReport = (id) => {
    this.setState({ showdeleteDialog: true, reportId: id });
  }

  deleteReports = () => {
    this.props.dispatch(deleteSingleReport(this.state.reportId));
    this.setState({ showdeleteDialog: false });
  }

  checkboxHandler = (row) => {
    this.props.dispatch(updateReportSelect(row));
  }

  // used to handle view type in oversightreport.js component.
  handlereportClick = (report, type) => {
    this.props.dispatch(setOversightReportAction(type));
    this.props.dispatch(setCurrentOversightReport(report));
    this.context.router.push(`/OverSightReportHome/oversightreport/${report.oversightReportId}`);
  }

  toggleState = () => {
    this.setState({ showsnackbar: false });
  }

  render() {
    const pathArr = this.props.location.pathname.split('/').filter(Boolean);
    const currentloc = this.props.location;
    console.log(currentloc, 'currentlocAA');
    let LoG = false;
    let LG = false;
    let ListPermition = 0;
    let AddPermition = 0;
    let UpdatePermition = 0;
    let DeletePermition = 0;
    if (localStorage.getItem('isAuthenticated')) {
      LG = localStorage.getItem('userInfo');
      LoG = (LG) ? JSON.parse(LG) : false;
    }
    if (LoG) {
      if ('userMenu' in LoG) {
        LoG.userMenu.map((item) => {
          if (item.slug === pathArr[0]) {
            ListPermition = item.List;
            AddPermition = item.Add;
            UpdatePermition = item.Update;
            DeletePermition = item.Delete;
          }
          return true;
        });
      }
    }
    console.log(ListPermition, AddPermition, UpdatePermition, DeletePermition);
    const { oversightReports, getOversightReqLoading } = this.props.oversightReport;
    // const myScrollbar = {
    //   width: '100%',
    //   height: '72vh'
    // };
    const columns = [{
      Header: '',
      accessor: 'checked',
      maxWidth: 46,
      filterable: false,
      hidden: true,
      show: (DeletePermition === 1),
      Cell: row => (
        <div className="text-center">
          {(DeletePermition === 1) &&
            <Checkbox
              onChange={() => this.checkboxHandler(row.original.oversightReportId)}
              checked={row.value}
            />
          }
        </div>
      )
    },
    {
      Header: 'Actions',
      accessor: 'Actions',
      maxWidth: 98,
      show: (UpdatePermition === 1 || DeletePermition === 1),
      Cell: row => (
        <div className="table-actions">{row.value}
          {(UpdatePermition === 1) &&
            <a
              className="action-icon"
              onClick={() => this.handlereportClick(row.original, 'edit')}
            >
              <img src="/assets/images/icons/ico-edit.svg" alt="" />
            </a>
          }
          {(DeletePermition === 1) &&
            <a
              className="action-icon"
              onClick={() => this.deleteSingleReport(row.original.oversightReportId)}
            >
              <svg xmlns="http://www.w3.org/2000/svg" width="13px" height="18px" viewBox="0 0 14.21 17.7"><title>delete</title><path d="M13,3.19h.87V2H8.59V.38h-3V2H.38V3.19h.87V15a2.36,2.36,0,0,0,2.36,2.36h7A2.36,2.36,0,0,0,13,15ZM11.74,15A1.14,1.14,0,0,1,10.6,16.1h-7A1.14,1.14,0,0,1,2.47,15V3.19h9.26Z" fill="#0070BF" stroke="#0070BF" strokeMiterlimit="10" strokeWidth="0.75" /></svg>
            </a>
          }
        </div>
      )
    },
    {
      Header: 'Oversight Report ID',
      accessor: 'oversightReportId',
      maxWidth: 85,
      Cell: row => (
        <span
          style={{
            color: 'blue',
            cursor: 'pointer'
          }}
          onClick={() => this.handlereportClick(row.original, 'view')}
        >
          {row.value}
        </span>
      )
    },
    {
      Header: 'Oversight Unit',
      accessor: 'oversightUnit',
      Cell: row => (
        <div>
          {row.value.name}
        </div>
      )
    }, {
      Header: 'Control Number',
      accessor: 'controlNumber'
    }, {
      Header: 'Report Number',
      accessor: 'reportNumber'
    }, {
      Header: 'Overseen Parties',
      accessor: 'overseenParties',
      Cell: row => (
        <div>
          <NamesComponent names={row.value} />
        </div>
      )
    },
    {
      Header: 'Assignment Start Date',
      accessor: 'assignmentStartDate',
      Cell: row => moment(row.value).format('DD/MM/YYYY')
    },
    {
      Header: 'Assignment End Date',
      accessor: 'assignmentEndDate',
      Cell: row => moment(row.value).format('DD/MM/YYYY')
    }];
    return (
      <div>
        <div className="containerWrap margin-top">
          <Link to="/OverSightReportHome/AddNewEntry">
            <button className={`btn btn-primary margin-right ${(AddPermition === 0 ? 'hide' : '')}`}>
              Create Oversight Report
            </button>
          </Link>
          <button className={`btn btn-primary margin-right ${(DeletePermition === 0 ? 'hide' : '')}`} onClick={this.deleteOversightReport}>
            Delete Report
          </button>
          <div className="margin-top">
            <ReactTable
              className="ManageEntriesReport oversighttable"
              columns={columns}
              data={oversightReports}
              showPagination={false}
              noDataText={getOversightReqLoading ? <LoadingComponent /> : 'No data Found!'}
              pageSize={oversightReports.length}
            />
          </div>
          <ConfirmDialog
            show={this.state.showConfirmDialog}
            onHideConfirmModal={this.onHideConfirmModal}
            submitConfirm={this.submitConfirm}
            header={'Delete Selected Reports?'}
          />
          <ConfirmDialog
            show={this.state.showdeleteDialog}
            onHideConfirmModal={this.hidedeleteModal}
            submitConfirm={this.deleteReports}
            header={'Delete Selected Reports?'}
          />
        </div>
        <Snackbar
          show={this.state.showsnackbar}
          timer={1000}
          toggleState={this.toggleState}
        >
          <p>{this.state.message}</p>
        </Snackbar>
      </div >
    );
  }
}

function mapStateToProps(state) {
  return {
    oversightReport: state.oversightReport
  };
}

export default connect(mapStateToProps)(OverSightReportHome);
